# 🐧 펭귄 비서 - Cursor Rules (Updated 2024.08)

## 📋 프로젝트 컨텍스트
- **프로젝트명**: 펭귄 비서 (Penguin Assistant)
- **목표**: 빙하 테마의 개인 생산성 관리 도구
- **기술스택**: React + TypeScript + MUI + Three.js + Firebase
- **테마**: 빙하/펭귄 (파란색, 흰색, 주황색 조합)
- **배포**: GitHub Pages (Web App)
- **언어**: 한국어 전용

## 🎯 핵심 기능
1. **빙하 기지** (`Dashboard.tsx`): 3D 펭귄 라이브 뷰 + 퀵 액션
2. **빙하 건강** (`ConditionTracker.tsx`): 5단계 컨디션 추적
3. **빙하 탐험** (`ProjectManager.tsx`): 칸반 보드 + 드래그 앤 드롭
4. **펭귄 뽀모도로** (`Pomodoro.tsx`): 3D 펭귄 타이머 + 세션 기록
5. **빙하 분석** (`Analytics.tsx`): 컨디션 + 뽀모도로 통계 + 주간보고
6. **빙하 설정** (`Settings.tsx`): 테마 + 사용자 설정

## 🔧 기술 스택 상세
### Frontend
- **React 18** + **TypeScript** (함수형 컴포넌트 필수)
- **Material-UI v5** (모든 UI 컴포넌트)
- **Three.js** (3D 펭귄 시각화)
- **React Router v6** (HashRouter 사용)
- **Day.js** (날짜 처리)
- **react-beautiful-dnd** (드래그 앤 드롭)

### Backend
- **Firebase Auth** (Google OAuth 전용)
- **Firestore** (실시간 데이터베이스)
- **GitHub Pages** (정적 사이트 호스팅)

### Build & Deploy
- **Vite** (빌드 도구)
- **gh-pages** (배포 자동화)

## 🎨 디자인 시스템
### 색상 팔레트
- **Primary**: #2196F3 (빙하 파란색)
- **Secondary**: #FFD700 (펭귄 부리 노란색) 
- **Accent**: #FF8C00 (따뜻한 주황색)
- **Success**: #4CAF50 (생선 초록색)
- **Background**: 라이트 #F8F9FA / 다크 #121212

### 이모지 가이드
- **펭귄**: 🐧 (사용자, 최고 컨디션)
- **빙하**: 🏔️❄️🧊 (메인 테마)
- **바다**: 🌊🐟 (완료, 성과)
- **상태**: 🌈(진행중), ❄️(일시정지), 🔴(취소)
- **도구**: 🍅(뽀모도로), 📊(분석), ⚙️(설정)

### UI 원칙
- **미니멀**: 정보 과부하 방지
- **반응형**: 모바일 우선 설계
- **일관성**: "빙하 XX" 네이밍 통일
- **접근성**: 색상 대비, 키보드 네비게이션

## 🧱 아키텍처 패턴

### 컴포넌트 구조
```
src/
├── components/        # 재사용 컴포넌트
│   ├── Layout.tsx    # 메인 레이아웃 + 네비게이션
│   ├── Login.tsx     # 로그인 폼
│   └── ModernPenguinScene.tsx  # 3D 펭귄 씬
├── pages/            # 페이지 컴포넌트
├── types/            # TypeScript 인터페이스
├── utils/            # 유틸리티 함수
│   └── firebase.ts   # Firebase 연동
└── config/           # 설정 파일
```

### 상태 관리 패턴
- **로컬 상태**: `useState` + `useEffect`
- **데이터 동기화**: Firebase ↔ localStorage 양방향
- **오류 처리**: try-catch + fallback 패턴
- **로딩 상태**: 각 컴포넌트별 관리

### 데이터 흐름
1. **로드**: Firebase → 실패시 localStorage fallback
2. **저장**: Firebase + localStorage 동시 저장
3. **동기화**: 로그인시 자동 양방향 동기화

## 🗄 Firebase 데이터 구조
```
users/{userId}/
├── data/
│   ├── conditions     # 컨디션 기록
│   ├── projects       # 프로젝트 데이터
│   └── settings       # 사용자 설정
└── pomodoro_sessions/ # 뽀모도로 세션 기록

accessRequests/        # 사용자 승인 요청
{email}/
├── status: "pending|approved|rejected"
├── displayName, photoURL
└── requestedAt, processedAt
```

## 🎮 3D 시스템 (Three.js)

### ModernPenguinScene 컴포넌트
- **펭귄 모델**: 현실적인 3D 펭귄 (SphereGeometry 조합)
- **환경**: 빙하, 바다, 눈 파티클
- **애니메이션**: 걷기, 마우스 추적, 물고기 점프
- **상태 시각화**: 프로젝트 상태별 펭귄 색상
- **인터랙션**: 호버 툴팁, 클릭 이벤트

### 성능 최적화
- **Scene 재사용**: 컴포넌트 언마운트시만 정리
- **애니메이션**: requestAnimationFrame 사용
- **메모리**: Geometry/Material 적절한 dispose

### React + Three.js 동기화 패턴 (고급)
```typescript
// ✅ useRef로 최신 상태 참조
const isActiveRef = useRef(false);
const dataRef = useRef<SomeData[]>([]);

useEffect(() => {
  isActiveRef.current = isActive; // 상태 동기화
}, [isActive]);

const animate = () => {
  // requestAnimationFrame 내에서 최신 상태 접근
  const currentActive = isActiveRef.current;
  if (currentActive) {
    // 애니메이션 로직
  }
  requestAnimationFrame(animate);
};

// ✅ 복합 오브젝트 그룹 관리
const createFishGroup = () => {
  const fishGroup = new THREE.Group();
  
  // 몸체, 꼬리, 눈 각각 생성
  const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
  const tail = new THREE.Mesh(tailGeometry, tailMaterial);
  const eye = new THREE.Mesh(eyeGeometry, eyeMaterial);
  
  fishGroup.add(body, tail, eye);
  return fishGroup;
};

// ✅ 토글 시스템 구현
const toggleObjectAtPosition = (targetPos) => {
  const existing = objects.findIndex(obj => 
    distance(obj.position, targetPos) < threshold
  );
  
  if (existing !== -1) {
    // 제거
    scene.remove(objects[existing]);
    objects.splice(existing, 1);
  } else {
    // 추가
    const newObj = createObject();
    newObj.position.copy(targetPos);
    scene.add(newObj);
    objects.push(newObj);
  }
};
```

## 📝 코딩 컨벤션

### TypeScript 규칙
```typescript
// ✅ 올바른 패턴
interface SimpleTodo {
  id: string;
  title: string;
  completed: boolean;
  createdAt: string;
}

const [todos, setTodos] = useState<SimpleTodo[]>([]);

// ❌ 피해야 할 패턴
const [data, setData] = useState<any>(null);
```

### React 훅 사용법
```typescript
// ✅ 의존성 배열 명시
useEffect(() => {
  loadData();
}, [selectedProject]);

// ❌ 의존성 누락
useEffect(() => {
  loadData();
}, []); // selectedProject 의존성 누락
```

### Firebase 호출 패턴
```typescript
// ✅ 에러 처리 + fallback
const loadData = async () => {
  try {
    const user = getCurrentUser();
    if (user) {
      const result = await loadUserData(user.uid, "projects");
      if (result.success && result.data) {
        setProjects(result.data);
      }
    }
  } catch (error) {
    console.error("데이터 로드 실패:", error);
    // localStorage fallback
    const localData = localStorage.getItem("projects");
    if (localData) {
      setProjects(JSON.parse(localData));
    }
  }
};
```

## 🚀 배포 워크플로우

### 개발 환경
```bash
npm run dev        # 로컬 개발 서버
npm run build      # 프로덕션 빌드
npm run preview    # 빌드 결과 미리보기
```

### 배포 프로세스
```bash
npm run deploy     # GitHub Pages 자동 배포
# 내부적으로: build → gh-pages -d dist
```

### URL 구조
- **Production**: https://callipenguin.github.io/my-penguin/
- **Router**: HashRouter 사용 (#/path 형태)
- **Assets**: 정적 파일 자동 최적화

## 🛠 문제 해결 가이드

### 자주 발생하는 문제들
1. **할일 연동 안됨**: `projectTodos` vs `project.tasks` 타입 불일치
2. **3D 렌더링 오류**: Three.js 메모리 누수, scene 정리 부족
3. **Firebase 연결 실패**: 네트워크 오류시 localStorage fallback
4. **라우팅 문제**: GitHub Pages에서 BrowserRouter → HashRouter
5. **테마 적용 안됨**: localStorage 설정 로드 타이밍 이슈

### 디버깅 패턴
```typescript
// Firebase 연결 상태 확인
console.log("Firebase 연결:", await checkFirebaseConnection());

// 3D Scene 상태 확인  
console.log("Scene objects:", scene.children.length);

// 상태 동기화 확인
console.log("Local:", localStorage.getItem("projects"));
console.log("State:", projects);
```

## 📚 다음 대화를 위한 컨텍스트

### 현재 진행 상황 (2024.12.19)
- ✅ 뽀모도로 3D 펭귄 애니메이션 동기화 문제 완전 해결
- ✅ 물고기 궤적 시스템 완전 구현 (토글 방식 + 헤엄치는 애니메이션)
- ✅ Three.js 렌더링 최적화 및 디버깅 시스템 구축
- ✅ React useRef 기반 상태 동기화 시스템 완성
- ✅ UI/UX 동적 개선 (조건부 텍스트, 상태별 안내)

### 기술적 성과 (새로 추가)
- **React + Three.js 동기화**: useRef로 애니메이션 루프와 React 상태 완전 동기화
- **복합 3D 오브젝트**: Group을 활용한 물고기 모델 (몸체+꼬리+눈) 렌더링
- **토글 애니메이션 시스템**: 위치 기반 동적 오브젝트 생성/제거 로직
- **Three.js 디버깅**: 실시간 오브젝트 상태 추적 및 렌더링 검증 시스템

### 다음 작업 후보
- [ ] projectTodos Firebase 동기화 구현
- [ ] 주차 선택기 UI 추가 (Analytics)  
- [ ] 테스트용 고정 구체 제거 (프로덕션 정리)
- [ ] 물고기 모델 세부 조정 (색상, 크기, 애니메이션)
- [ ] 성능 최적화 (Three.js 메모리 관리)

### 새로운 주의사항
- **Three.js + React**: 항상 useRef로 최신 상태 참조, setState의 비동기성 고려
- **복합 오브젝트 정리**: Group 내부 Mesh들도 개별적으로 dispose 필요
- **애니메이션 최적화**: requestAnimationFrame 내에서 과도한 로그 방지
- **디버깅 시스템**: 개발 중에는 상세 로그, 프로덕션에서는 최소화
- **물고기 테마 확장**: 빙하 생태계 완성으로 일관성 있는 UX 제공

---
🐧 *펭귄과 함께하는 생산적인 개발을 위해! 화이팅!* ❄️ 